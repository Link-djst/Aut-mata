/*this->char_ = open_paranthesis+"CHR("+open_paranthesis+this->number+close_paranthesis+")"+close_paranthesis;
this->character = open_paranthesis+apostrophe+open_paranthesis+this->letter+or_operation+this->number+close_paranthesis+apostrophe+close_paranthesis;
this->character0 = open_paranthesis+this->char_+or_operation+this->character+close_paranthesis;
this->string_ = quote+this->letter+open_brackets+this->letter+close_brackets+quote;
this->basicSet = open_paranthesis+open_paranthesis+this->character0+open_braces+".."+this->character0+close_braces+close_paranthesis+or_operation+this->ident+or_operation+this->string_+close_paranthesis;
this->set = open_paranthesis+this->basicSet+open_brackets+open_paranthesis+"+"+or_operation+"-"+close_paranthesis+this->basicSet+close_brackets+close_paranthesis;
this->setDecl = ident+"="+set;
string exprsn;*/
/*vector<char> L;
Tree* tree = new Tree();
tree->parse(setDecl);
cout << "AST " << endl;
tree->display();
L = tree->getL();//aaddasefvaawevGGFEWQ2*/
/*cout << "AFN START" << endl;
AFN* afn = new AFN();
afn->createAFN(tree->getRoot(), L);
cout << "AFN READY FOR TEST" << endl;
cout << "Enter Expression " << endl;
cin >> exprsn ;
afn->simulationAFN(exprsn);
AFDX* afdx = new AFDX();
cout << "AFN TO AFD "<< endl;
afdx->createAFDX(afn->get_vertex_init_result(), L);
cout << "AFDX READY FOR TEST" << endl;
cout << "Enter Expression " << endl;
cin >> exprsn ;
afdx->simulationAFDX(exprsn);
//afdx->minAFD();*/
/*cout << "AST TO AFD "<< endl;
AFD* afd = new AFD();
afd->createAFD(tree->getRoot(), L);
cout << "AFD READY FOR TEST" << endl;
cout << "Enter Expression " << endl;
cin >> exprsn ;
afd->simulationAFD(exprsn);*/
//afd->minAFD();
